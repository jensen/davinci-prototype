generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  email    String  @unique
  password String?

  account      Account[]
  completion   Completion[]
  subscription Subscription?
  Profile      Profile[]

  @@map("users")
}

model Profile {
  id   String @id @db.Uuid
  user User   @relation(fields: [id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  name   String
  avatar String

  @@map("profiles")
}

model Provider {
  id         String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  name    String
  account Account[]

  @@map("providers")
}

model Account {
  id         String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  uid         String
  provider_id String @db.Uuid
  user_id     String @db.Uuid

  provider Provider @relation(fields: [provider_id], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Subscription {
  id         String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  plan        String  @default("base")
  customer_id String?

  user_id String @unique(map: "subscriptions_pk") @db.Uuid
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Completion {
  id         String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  model    String
  type     String
  prompt   String
  text     String
  parsed   Json
  finished String

  usage_prompt     Int
  usage_completion Int
  usage_total      Int

  user_id String @db.Uuid
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("completions")
}
